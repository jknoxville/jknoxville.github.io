---
import { getCollection, render } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
// 1. Generate a new path for every collection entry
const { tag } = Astro.props;
export async function getStaticPaths() {
  const tags = [
    ...new Set(
      (await getCollection("blog"))
        .map((post) => post.data.tags)
        .flat()
        .toSorted()
    ),
  ].filter(Boolean) as string[];
  return tags.map((tag) => ({
    params: { tag },
    props: { tag },
  }));
}

const posts = await getCollection("blog", (entry) =>
  entry.data.tags?.includes(tag)
);
---

<BaseLayout
  title={"test"}
  description={"description"}
  permalink={"permalink"}
  current="notes"
>
  <div class="container">
    <h1>#{tag}</h1>
    {
      posts.map((post, index) => {
        const href = `/notes/${post.id}`;
        return (
          <div>
            {index !== 0 && <hr />}
            <div class="post-item">
              <h2>
                <a href={href}>{post.data.title}</a>
              </h2>
              <p>{post.data.description}</p>
              <div class="post-item-footer">
                <span class="post-item-date">â€” {post.data.publishDate}</span>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
</BaseLayout>

<style>
  h2,
  .post-item-footer {
    font-family: var(--font-family-sans);
    font-weight: 700;
  }

  .post-item-date {
    color: var(--text-secondary);
    text-align: left;
    text-transform: uppercase;
    margin-right: 16px;
  }

  hr {
    margin: 60px auto;
  }
</style>
