---
import { ViewTransitions } from "astro:transitions";
import "../styles/fonts.css";
import "../styles/global.css";

export interface Props {
  title: string;
  description: string;
  permalink: string;
}

const { title, description, permalink } = Astro.props;
const socialUrl = Astro.site?.href + "assets/social.png";
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={socialUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={permalink} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={socialUrl} />

<ViewTransitions />

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline>
  const root = document.documentElement;
  const theme = localStorage.getItem("theme");
  if (
    theme === "dark" ||
    (!theme && window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    root.classList.add("theme-dark");
  } else {
    root.classList.remove("theme-dark");
  }
</script>
<script is:inline defer>
  document.addEventListener("astro:page-load", () => {
    const path = window.location.pathname;
    const should_collect = localStorage.getItem("tinylytics_ignore") == null;
    const current_url = encodeURIComponent(window.location.href);
    const collect_url = "https://tinylytics.app/collector/ixS2NSemyBcp_MtLRQWV";
    const set_ignore_param =
      new URLSearchParams(document.location.search)?.get("tiny_ignore") ||
      new URLSearchParams(document.location.search)?.get("ti");
    const referrer =
      document.referrer.indexOf(window.location.href) < 0
        ? document.referrer
        : "";
    if (set_ignore_param) {
      if (
        set_ignore_param === "true" &&
        localStorage.getItem("tinylytics_ignore") == null
      ) {
        localStorage.setItem("tinylytics_ignore", true);
        should_collect = false;
        alert("tinylytics will no longer track your own hits in this browser.");
      } else if (
        set_ignore_param === "false" &&
        localStorage.getItem("tinylytics_ignore") != null
      ) {
        localStorage.removeItem("tinylytics_ignore");
        should_collect = true;
        alert(
          "tinylytics has been enabled for this website, for this browser."
        );
      }
      if (set_ignore_param === "true") {
        localStorage.setItem("tinylytics_ignore", true);
      }
    }
    if (should_collect) {
      fetch(
        `${collect_url}?url=${current_url}&path=${path}&referrer=${referrer}`,
        {
          method: "post",
        }
      );
    }
    let hit_containers = document.querySelectorAll(".tinylytics_hits");
    if (hit_containers) {
      let hits_count_url = "https://tinylytics.app/hits/ixS2NSemyBcp_MtLRQWV";
      hit_containers.forEach((hits_container) => {
        if (path) {
          fetch(`${hits_count_url}?path=${path}`)
            .then((response) => response.json())
            .then((data) => {
              if (data.count != null) {
                hits_container.innerHTML = `${data.count}`;
                document.querySelectorAll("visitornumber").forEach((el) => {
                  el.style.opacity = "1";
                });
              }
            });
        }
      });
    }
  });
</script>
